#include <bits/stdc++.h>
using namespace std;
using namespace chrono;
#define int long long
#define ll long long 
#define ld long double
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define Dgoogle(t, ans) cout << "Case #" << (t) << ": " << fixed << (ans) << "\n";
#define google(t, ans) cout << "Case #" << (t) << ": " << (ans) << "\n";

const ll MOD = 1000000007;
const ll inf = (long long)1e18;
const int INF = (int)1e9 + 5;

void init_code() {
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout); freopen("error.txt", "w", stderr);
    #endif
}
/*-------------------------------------------------------------------------------------------------------*/
/*
Idea: Here, its best to avoid path compression so that order of score assignment don't get disturbed.
Every time we want to add score, we'll add it to the leader.

Now, when we want to find score of any node then all we have to do is to add all the scores present in the path
from the current node to the leader of that set. (remember that these path contains all the old leaders of the current node
and since we're always adding score to the leader so, following the path to the current leader of the set and adding all the 
scores in b/w would give us the desired score any node).

example test case:
6 15
join 1 3
join 3 2
join 5 6
add 6 50
join 6 4
add 2 100
join 4 5
join 1 4
add 1 20
get 1
get 2
get 3
get 4
get 5
get 6
*/
struct DSU {
    vector<int> parent;
    vector<int> sz;
    vector<int> score;
    DSU(int n) {
        parent = vector<int>(n+1, 0LL);
        sz = vector<int>(n+1, 1LL);
        score = vector<int>(n+1, 0LL);
        for (int i=1LL; i<=n; ++i) { 
            parent[i] = i;
        }
    }
    int find(int node) {
        if (node == parent[node]) 
            return node;

        // no path compression
        return find(parent[node]);
    }
    void merge(int node1, int node2) {
        int p1 = find(node1);
        int p2 = find(node2);
        if (p1 == p2) { 
            return; 
        }
    
        if (sz[p1] >= sz[p2]) {
            // we'll have to subtract new parent's score from old parent's score(in our case old parent is p2) because
            // new parent's current score doesn't belong to any of the child nodes of the old parent. But no worries,
            // as this negation would be compensanted because while calculating the score of a node, we add all the scores
            // present in the path from current node to the latest leader of that set.
            
            score[p2] -= score[p1];   
            parent[p2] = p1; 
            sz[p1] += sz[p2];
        }
        else {
            score[p1] -= score[p2];
            parent[p1] = p2; 
            sz[p2] += sz[p1];
        }
        return;
    }

    void addScore(int node, int points) {
        score[find(node)] += points;
        return;
    }

    int getScore(int node) {
        if (parent[node] == node) {
            return score[node];
        }
        return score[node] + getScore(parent[node]);
    }
};
void solve() {
    int n, m; cin >> n >> m;

    DSU dsu(n);
    for (int i=0; i<m; ++i) {
        string str; cin >> str;
        if (str == "add") {
            int x, v; cin >> x >> v;
            dsu.addScore(x, v);
        }
        else if (str == "join") {
            int x, y; cin >> x >> y;
            dsu.merge(x, y);
        }
        else {
            int x; cin >> x;
            cout << dsu.getScore(x) << "\n";
        }
    }
    return;
}

signed main() {
    init_code();
    auto start1 = high_resolution_clock::now();
    solve();
    auto stop1 = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop1 - start1);
    #ifndef ONLINE_JUDGE
        cerr << "Time: " << duration.count() / 1000 << endl;
    #endif
    return 0;
}
