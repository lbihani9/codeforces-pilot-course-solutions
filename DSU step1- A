#include <bits/stdc++.h>
using namespace std;
using namespace chrono;
#define int long long
#define ll long long 
#define ld long double
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define Dgoogle(t, ans) cout << "Case #" << (t) << ": " << fixed << (ans) << "\n";
#define google(t, ans) cout << "Case #" << (t) << ": " << (ans) << "\n";
const ll MOD = 1000000007;
const ll inf = (long long)1e18;
const int INF = (int)1e9 + 5;

void init_code() {
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout); freopen("error.txt", "w", stderr);
    #endif
}
/*-------------------------------------------------------------------------------------------------------*/
struct DSU {
    vector<int> parent;
    vector<int> sz;
    DSU(int n) {
        parent = vector<int>(n+1, 0LL);
        sz = vector<int>(n+1, 1LL);
        for (int i=1LL; i<=n; ++i) { 
            parent[i] = i;
        }
    }
    int find(int node) {
        if (node == parent[node]) 
            return node;

        // with path compression
        parent[node] = find(parent[node]);
        return parent[node];
    }
    void merge(int node1, int node2) {
        int p1 = find(node1);
        int p2 = find(node2);
        if (p1 == p2) { 
            return; 
        }
    
        if (sz[p1] >= sz[p2]) {
            parent[p2] = p1; 
            sz[p1] += sz[p2];
        }
        else {
            parent[p1] = p2; 
            sz[p2] += sz[p1];
        }
        return;
    }
};
void solve() {
    int n, m; cin >> n >> m;
    DSU dsu(n);

    for (int i=0; i<m; ++i) {
        string str; cin >> str;
        int u, v; cin >> u >> v;
        if (str == "union") {
            dsu.merge(u, v);
        }
        else {
            cout << ((dsu.find(u) == dsu.find(v)) ? "YES\n" : "NO\n");
        }
    }
    return;
}

signed main() {
    init_code();
    auto start1 = high_resolution_clock::now();
    solve();
    auto stop1 = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop1 - start1);
    #ifndef ONLINE_JUDGE
        cerr << "Time: " << duration.count() / 1000 << endl;
    #endif
    return 0;
}
